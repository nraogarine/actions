# .github/workflows/validate-storage-request.yml
name: "Validate Storage Request"
on:
  issues:
    types: [opened, edited]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Issue Data
        id: extract-issue
        run: |
          echo "Extracting issue data"

          # Fetch issue body
          ISSUE_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }} | jq -r .body)

          # Extract environment-identifier, azure-region, and other fields using regex
          #run: echo "Environment: '${{ github.event.issue.body.environment-identifier }}'"
          #ENVIRONMENT_IDENTIFIER=$(echo "${ISSUE_BODY}" | grep -oP '(?<=environment-identifier:).*' | xargs)
          ENVIRONMENT_IDENTIFIER=$(echo "Environment: '${{ github.event.issue.body.environment-identifier }}'")
          AZURE_REGION=$(echo "${ISSUE_BODY}" | grep -oP '(?<=azure-region:).*' | xargs)
          BUSINESS_UNIT=$(echo "${ISSUE_BODY}" | grep -oP '(?<=business-unit:).*' | xargs)
          ACCESS_CONNECTOR_ID=$(echo "${ISSUE_BODY}" | grep -oP '(?<=access-connector-id:).*' | xargs)
          MANAGED_IDENTITY=$(echo "${ISSUE_BODY}" | grep -oP '(?<=user-assigned-managed-identity:).*' | xargs)
          WORKSPACE_NAME=$(echo "${ISSUE_BODY}" | grep -oP '(?<=workspace-name:).*' | xargs)
          STORAGE_CONTAINER_COUNT=$(echo "${ISSUE_BODY}" | grep -oP '(?<=num-storage-containers:).*' | xargs)

          # Set extracted data as output for further validation
          echo "environment-identifier=$ENVIRONMENT_IDENTIFIER" 
          echo "azure-region=$AZURE_REGION" 
          echo "workspace-name=$WORKSPACE_NAME" >> $GITHUB_OUTPUT
          echo "storage-container-count=$STORAGE_CONTAINER_COUNT" >> $GITHUB_OUTPUT

      - name: Validate Environment and Inputs
        run: |
          echo "Validating environment and inputs"

          # Validate environment-identifier
          if [[ "${{ steps.extract-issue.outputs.environment-identifier }}" =~ ^(dev|stg|nonprod|sbx|prod)$ ]]; then
            echo "Valid environment identifier: ${{ steps.extract-issue.outputs.environment-identifier }}"
          else
            echo "Invalid environment identifier"; exit 1;
          fi

          # Validate Azure region
          if [[ "${{ steps.extract-issue.outputs.azure-region }}" =~ ^(centralus|eastus|eastus2)$ ]]; then
            echo "Valid Azure region: ${{ steps.extract-issue.outputs.azure-region }}"
          else
            echo "Invalid Azure region"; exit 1;
          fi

          # Validate Access Connector ID format
          if [[ ! "${{ steps.extract-issue.outputs.access-connector-id }}" =~ ^/subscriptions/ ]]; then
            echo "Invalid Access Connector ID"; exit 1;
          fi

          # Validate Workspace Name doesn't contain "workspace"
          if [[ "${{ steps.extract-issue.outputs.workspace-name }}" =~ workspace ]]; then
            echo "Workspace name contains 'workspace'. Invalid!"; exit 1;
          fi

          # Validate Storage Container URLs and Owner Groups (loop based on user input)
          for i in $(seq 1 ${{ steps.extract-issue.outputs.storage-container-count }}); do
            URL_VAR="steps.extract-issue.outputs.storage-container-url-${i}"
            OWNER_VAR="steps.extract-issue.outputs.owner-group-${i}"

            if [[ ! "${!URL_VAR}" =~ abfss://.*@.*.dfs.core.windows.net ]]; then
              echo "Invalid storage container URL: ${!URL_VAR}"; exit 1;
            fi

            if [[ ! "${!OWNER_VAR}" =~ ^azu_ ]]; then
              echo "Invalid owner group: ${!OWNER_VAR}"; exit 1;
            fi
          done

          echo "All inputs are valid."
