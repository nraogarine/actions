name: Validate and Parse Issue Inputs

on:
  issues:
    types: [opened]

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Validate issue inputs
        id: validation
        run: |
          # Parse values from the issue form
          environment_identifier="${{ github.event.issue.body | fromJson | index 'environment-identifier' }}"
          azure_region="${{ github.event.issue.body | fromJson | index 'azure-region' }}"
          business_unit="${{ github.event.issue.body | fromJson | index 'business-unit' }}"
          access_connector_id="${{ github.event.issue.body | fromJson | index 'access-connector-id' }}"
          user_assigned_managed_identity="${{ github.event.issue.body | fromJson | index 'user-assigned-managed-identity' }}"
          workspace_name="${{ github.event.issue.body | fromJson | index 'workspace-name' }}"
          storage_container_urls="${{ github.event.issue.body | fromJson | index 'storage-container-url' }}"
          owner_group="${{ github.event.issue.body | fromJson | index 'owner-group' }}"

          # Validation logic
          echo "Validating inputs..."
          
          # Validate Environment Identifier
          case "$environment_identifier" in
            dev|stg|nonprod|sbx|prod) echo "Environment Identifier valid" ;;
            *) echo "Invalid environment identifier: $environment_identifier" && exit 1 ;;
          esac
          
          # Validate Azure Region
          case "$azure_region" in
            centralus|eastus|eastus2) echo "Azure Region valid" ;;
            *) echo "Invalid azure region: $azure_region" && exit 1 ;;
          esac

          # Validate Access Connector ID
          if [[ "$access_connector_id" != "/subscriptions/"* ]]; then
            echo "Invalid Access Connector ID: $access_connector_id" && exit 1
          fi

          # Validate Storage Container URLs
          echo "Validating storage container URLs..."
          IFS=$'\n' read -rd '' -a urls <<<"$storage_container_urls"
          for url in "${urls[@]}"; do
            if [[ ! "$url" =~ ^abfss://.+@.+\.dfs\.core\.windows\.net$ ]]; then
              echo "Invalid Storage Container URL: $url" && exit 1
            fi
          done
          
          # Validate Owner Group
          if [[ ! "$owner_group" =~ ^azu_ ]]; then
            echo "Invalid Owner Group: $owner_group" && exit 1
          fi

          echo "All inputs are valid!"

      - name: Print inputs
        run: |
          echo "Environment Identifier: ${{ steps.validation.outputs.environment_identifier }}"
          echo "Azure Region: ${{ steps.validation.outputs.azure_region }}"
          echo "Business Unit: ${{ steps.validation.outputs.business_unit }}"
          echo "Access Connector ID: ${{ steps.validation.outputs.access_connector_id }}"
          echo "User Assigned Managed Identity: ${{ steps.validation.outputs.user_assigned_managed_identity }}"
          echo "Workspace Name: ${{ steps.validation.outputs.workspace_name }}"
          echo "Storage Container URLs: ${{ steps.validation.outputs.storage_container_urls }}"
          echo "Owner Group: ${{ steps.validation.outputs.owner_group }}"
